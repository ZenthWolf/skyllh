{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example how-to create a signal time PDF"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example we demonstrate how to create a signal time PDF with a gaussian shape."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from skyllh.core.detsigyield import NullDetSigYieldBuilder\n",
    "from skyllh.core.livetime import Livetime\n",
    "from skyllh.core.model import SourceModel\n",
    "from skyllh.core.parameters import ParameterModelMapper\n",
    "from skyllh.core.signalpdf import SignalTimePDF\n",
    "from skyllh.core.source_hypo_grouping import (\n",
    "    SourceHypoGroup,\n",
    "    SourceHypoGroupManager,\n",
    ")\n",
    "from skyllh.core.storage import DataFieldRecordArray\n",
    "from skyllh.core.trialdata import TrialDataManager\n",
    "from skyllh.core.flux_model import (\n",
    "    GaussianTimeFluxProfile,\n",
    "    NullFluxModel,\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The :py:class:`~skyllh.core.signalpdf.SignalTimePDF` class provides a \n",
    "generalized time PDF class, which requires a \n",
    ":py:class:`~skyllh.core.livetime.Livetime` instance and a \n",
    ":py:class:`~skyllh.core.flux_model.TimeFluxProfile` instance."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First let's construct the ``Livetime`` instance with three detector on-time\n",
    "intervals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "livetime_data = np.array([\n",
    "        [1, 3], \n",
    "        [4, 7],\n",
    "        [8, 9],\n",
    "    ],\n",
    "    dtype=np.float64)\n",
    "livetime = Livetime(livetime_data)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Now we can construct the time flux profile. We choose a gaussian profile. \n",
    "Other profiles exist as well, e.g. the \n",
    ":py:class:`~skyllh.core.flux_model.BoxTimeFluxProfile`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_flux_profile = GaussianTimeFluxProfile(t0=4, sigma_t=0.2)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ``t_start`` and ``t_stop`` properties of the profile tell us how far the time profile extends: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "t_start = 2.5132311244600647\n",
      "t_stop = 5.486768875539935\n"
     ]
    }
   ],
   "source": [
    "print(f't_start = {time_flux_profile.t_start}')\n",
    "print(f't_stop = {time_flux_profile.t_stop}')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Finally, we can construct the :py:class:`~skyllh.core.signalpdf.SignalTimePDF`\n",
    "instance. Since our PDF will not depend on any parameters, we set the parameter\n",
    "model mapper (``pmm``) argument to ``None``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "sigpdf = SignalTimePDF( \n",
    "    livetime=livetime, \n",
    "    time_flux_profile=time_flux_profile)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In order to evaluate our time PDF, we need to create some SkyLLH framework\n",
    "infrastructure first. The :py:meth:`~skyllh.core.pdf.PDF.get_pd` method requires\n",
    "a :py:class:`~skyllh.core.trialdata.TrialDataManager` instance, which we create\n",
    "now. We initialize the trial data manager with trial data containing the \n",
    "``time`` values we want to evaluate. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "outputs": [],
   "source": [
    "shg_mgr = SourceHypoGroupManager(\n",
    "    SourceHypoGroup(\n",
    "        sources=SourceModel(),\n",
    "        fluxmodel=NullFluxModel(),\n",
    "        detsigyield_builders=NullDetSigYieldBuilder())\n",
    ")\n",
    "\n",
    "pmm = ParameterModelMapper(models=shg_mgr.source_list)\n",
    "\n",
    "t = np.linspace(0, 10, int(10/0.05))\n",
    "events = DataFieldRecordArray(np.array(t, dtype=[('time', np.float64)]))\n",
    "\n",
    "tdm = TrialDataManager()\n",
    "tdm.initialize_trial(\n",
    "    shg_mgr=shg_mgr, \n",
    "    pmm=pmm,\n",
    "    events=events)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The PDF instance needs to get initialized with the trial data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "sigpdf.initialize_for_new_trial(tdm=tdm)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can evaluate PDF. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "(pd, grads) = sigpdf.get_pd(\n",
    "    tdm=tdm, \n",
    "    src_params_recarray=pmm.create_src_params_recarray())"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can verify the normalization of the PDF to unity by integrating the \n",
    "probability density values over time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total integral = 1.0200980782124147\n"
     ]
    }
   ],
   "source": [
    "total_integral = np.sum(pd[1:]*np.diff(t))\n",
    "print(f'total integral = {total_integral}')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also plot the PDF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability density / time$^{-1}$')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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AADArWodPqZPn659+/a5shYAAHATqHX4+P777zVo0CC1adNG48eP12effaby8nJX1gYAALxQrcPHihUrVFhYqHfffVeBgYGaMmWKWrZsqd/85jd68803dfr0aVfWCQAAvISpOR+NGjXS/fffr1dffVWHDx9WZmamevXqpcWLF6t169bq27ev/vznP+v48eM3PHZycrLuvvtuBQYGqlWrVoqPj9fhw4dr3GbVqlUyDMNp4RbvAADULy6dcHrnnXfq2Wef1f/+7/8qPz9fo0aN0pdffql33333hsf64osvNGHCBO3evVtpaWmqqKjQgw8+qNLS0hq3CwoKUkFBgWM5duxYbd8OAACoA6ZvMlad2267TWPGjNGYMWNqtf2mTZuc1letWqVWrVpp37596tu3b7XbGYah0NDQWu0TAADUvQZzqW1xcbEk6ZZbbqmx3/nz59WuXTuFh4frscce08GDB2vsX1ZWppKSEqcFAADUnQYRPiorKzVlyhT16dNHUVFR1fbr3LmzVqxYoY8++khvv/22Kisr1bt3b33//ffVbpOcnKzg4GDHEh4eXhdvAQAA/J8GET4mTJigAwcOaO3atTX2s1qtSkhIUPfu3dWvXz99+OGHuu2227R48eJqt0lKSlJxcbFjyc/Pd3X5AADgZ+pszoerTJw4UR9//LF27NihNm3a3NC2vr6+6tGjh44cOVJtH4vFIovFYrZMAABwnUwf+Rg1apR27Njhilqc2O12TZw4URs2bNDnn3+uiIiIGx7DZrMpNzdXYWFhLq8PAADUjunwUVxcrIEDB6pTp06aM2dOre7pUZUJEybo7bff1po1axQYGKjCwkIVFhbq4sWLjj4JCQlKSkpyrM+cOVNbtmzRd999p+zsbI0YMULHjh3T2LFjXVITAAAwz3T42Lhxo44fP67x48dr3bp1at++vQYNGqT3339fFRUVtR43JSVFxcXF6t+/v8LCwhzLunXrHH3y8vJUUFDgWD9z5oyeeuop3XnnnXr44YdVUlKiXbt2KTIy0tR7BAAArmPY7Xa7KwfMzs7WypUrtWzZMjVr1kwjRozQ//t//0+dOnVy5W7qTElJiYKDg1VcXKygoCBPlwPUqQvllxQ5fbMk6dDMOAX4Nb6h1wHg5673O9SlV7sUFBQoLS1NaWlp8vHx0cMPP6zc3FxFRkZq/vz5rtwVAABooEyHj4qKCn3wwQf61a9+pXbt2mn9+vWaMmWKTpw4odWrV2vr1q167733NHPmTFfUCwAAGjjTx1DDwsJUWVmpYcOGac+ePerevftVfR544AE1b97c7K4AAIAXMB0+5s+fryFDhtT49NjmzZvr6NGjZncFAAC8gOnTLv369avyJl12u115eXlmhwcAAF7GdPiIiIjQqVOnrmo/ffp0rW4MBgAAvJvp8GG322UYxlXt58+fr/FUDAAAuDnVes5HYmKiJMkwDL344osKCAhwvGaz2ZSZmVnl5FMAAHBzq3X4yMnJkfTTkY/c3Fz5+fk5XvPz81O3bt00bdo08xUCAACvUuvwsW3bNknS6NGjtXDhQgUGBrqsKAAA4L1qFT4SExM1a9YsNW3aVM2bN9dLL71Ubd958+bVujgAAOB9ahU+cnJyHA+N279/f7X9qpqICgAAbm61Ch+XT7lc+W8AAIBrcemD5QAAAK7FdPi4ePGiLly44Fg/duyYXn/9dW3evNns0AAAwAuZDh+PPfaY3nzzTUnS2bNn1atXL82dO1fx8fFKSUkxXSCA+uFCuU12u93TZQDwAqbDR3Z2tu6//35J0vvvv6+QkBAdO3ZMb775phYuXGi6QAD1Q+zsrRqSmkEAAWCa6fBx4cIFxz0+tmzZoscff1yNGjXSvffeq2PHjpkuEIDnNPH1UWy7Fo71rGNndLHC5sGKAHgD0+GjY8eO2rhxo/Lz87V582Y9+OCDkqSTJ08qKCjIdIEAPMcwDK0fZ1XWCwM9XQoAL2I6fEyfPl3Tpk1T+/btdc8998hqtUr66ShIjx49TBcIwLMMw1CAn4+nywDgRWp9e/XLnnjiCd13330qKChwepDcgAED9Pjjj5sdHgAAeBnT4UOSDh48qPT0dL3xxhuqrKx0em3FihWu2AUAAPASpsPHjBkzNHPmTMXGxiosLIxbqgMAgBqZDh+pqalatWqVRo4c6Yp6AACAlzM94bS8vFy9e/d2RS1OkpOTdffddyswMFCtWrVSfHy8Dh8+fM3t1q9fry5dusjf319du3bVp59+6vLaAABA7ZkOH2PHjtWaNWtcUYuTL774QhMmTNDu3buVlpamiooKPfjggyotLa12m127dmnYsGEaM2aMcnJyFB8fr/j4eB04cMDl9QEAgNoxfdrlxx9/1JIlS7R161ZFR0fL19fX6fV58+bVatxNmzY5ra9atUqtWrXSvn371Ldv3yq3WbBggR566CE988wzkqRZs2YpLS1NixYtUmpqaq3qAAAArmU6fPztb39zXGJ75REGV04+LS4uliTdcsst1fbJyMhQYmKiU1tcXJw2btzosjoAAIA5psPHtm3bXFFHjSorKzVlyhT16dNHUVFR1fYrLCxUSEiIU1tISIgKCwur3aasrExlZWWO9ZKSEvMFAwCAapme8+EOEyZM0IEDB7R27VqXj52cnKzg4GDHEh4e7vJ9AACAf3FJ+Pjyyy81YsQIWa1WHT9+XJL01ltvaefOnabHnjhxoj7++GNt27ZNbdq0qbFvaGioioqKnNqKiooUGhpa7TZJSUkqLi52LPn5+aZrBgAA1TMdPj744APFxcWpSZMmysnJcZzCKC4u1pw5c2o9rt1u18SJE7VhwwZ9/vnnioiIuOY2VqtV6enpTm1paWmO581UxWKxKCgoyGkBAAB1x3T4mD17tlJTU7V06VKnK1369Omj7OzsWo87YcIEvf3221qzZo0CAwNVWFiowsJCXbx40dEnISFBSUlJjvXJkydr06ZNmjt3rr7++mv98Y9/VFZWliZOnFjrOgAAgGuZDh+HDx+u8tLX4OBgnT17ttbjpqSkqLi4WP3791dYWJhjWbdunaNPXl6eCgoKHOu9e/fWmjVrtGTJEnXr1k3vv/++Nm7cWOMkVQAA4F6mr3YJDQ3VkSNH1L59e6f2nTt36o477qj1uHa7/Zp9tm/fflXbkCFDNGTIkFrvFwAA1C3TRz6eeuopTZ48WZmZmTIMQydOnNA777yjadOmafz48a6oEQAAeBHTRz6ee+45VVZWasCAAbpw4YL69u0ri8WiadOmadKkSa6oEQAAeBHT4cMwDD3//PN65plndOTIEZ0/f16RkZFq1qyZK+oDAABexnT4uMzPz0+RkZGuGg4AAHipWoWPK5+fUpPaPlgOAAB4p1qFj5ycHKf17OxsXbp0SZ07d5YkffPNN/Lx8VFMTIz5CgEAgFepVfj4+cPk5s2bp8DAQK1evVotWrSQJJ05c0ajR4/W/fff75oqAQCA1zB9qe3cuXOVnJzsCB6S1KJFC82ePVtz5841OzwAAPAypsNHSUmJTp06dVX7qVOndO7cObPDAwAAL2M6fPz617/W6NGj9eGHH+r777/X999/rw8++EBjxozR448/7ooaAQCAFzF9qW1qaqqmTZum//iP/1BFRcVPgzZurDFjxui1114zXSAAAPAupsNHQECA/uu//kuvvfaavv32W0lShw4d1LRpU9PFAQAA7+Oym4w1bdpU0dHRrhoOAAB4KdNzPgAAAG4E4QMAALgV4QMAALiV6fAxatQo7dixwxW1AACAm4Dp8FFcXKyBAweqU6dOmjNnjo4fP+6KugAAgJcyHT42btyo48ePa/z48Vq3bp3at2+vQYMG6f3333fc9wMAAOAyl8z5uO2225SYmKi//vWvyszMVMeOHTVy5Ei1bt1aU6dO1d///ndX7AYAAHgBl044LSgoUFpamtLS0uTj46OHH35Yubm5ioyM1Pz58125KwAA0ECZDh8VFRX64IMP9Ktf/Urt2rXT+vXrNWXKFJ04cUKrV6/W1q1b9d5772nmzJmuqBeAh10ot+lC+SXZ7XZPlwKggTJ9h9OwsDBVVlZq2LBh2rNnj7p3735VnwceeEDNmzc3uysA9UDs7K0//bddC60fZ5VhGB6uCEBDYzp8zJ8/X0OGDJG/v3+1fZo3b66jR4+a3RUAD2ni66PYdi2UdeyMoy3r2BldrLApwM9lT2kAcJMw/VujX79+slgsV7Xb7Xbl5+erbdu2ZncBwMMMw9D6cVZdrLDpQrnNcfQDAGrD9JyPiIgInTp16qr206dPKyIiwtTYO3bs0ODBg9W6dWsZhqGNGzfW2H/79u0yDOOqpbCw0FQdAH4KIAF+jRXg5+PpUgA0cKbDh91ur/Kc7/nz52s8FXM9SktL1a1bN73xxhs3tN3hw4dVUFDgWFq1amWqDgAA4Dq1Pu2SmJgo6ae/hl588UUFBAQ4XrPZbMrMzKxy8umNGDRokAYNGnTD27Vq1YoJrgAA1FO1Dh85OTmSfjrykZubKz8/P8drfn5+6tatm6ZNm2a+wlro3r27ysrKFBUVpT/+8Y/q06dPtX3LyspUVlbmWC8pKXFHiQAA3LRqHT62bdsmSRo9erQWLFigoKAglxVVW2FhYUpNTVVsbKzKysq0bNky9e/fX5mZmerZs2eV2yQnJ2vGjBlurhQAgJuX6atdVq5c6Yo6XKJz587q3LmzY71379769ttvNX/+fL311ltVbpOUlOQ4hST9dOQjPDy8zmsFAOBmVavwkZiYqFmzZqlp06ZOX9xVmTdvXq0Kc5V77rlHO3furPZ1i8VS5aXCAACgbtQqfOTk5DieWHt57kdV6sOdD/fv36+wsDBPlwEAAP5PrcLH5fkeV/7b1c6fP68jR4441o8ePar9+/frlltuUdu2bZWUlKTjx4/rzTfflCS9/vrrioiI0F133aUff/xRy5Yt0+eff64tW7bUWY0AAODG1Ov7ImdlZemBBx5wrF8+xTNq1CitWrVKBQUFysvLc7xeXl6u3/3udzp+/LgCAgIUHR2trVu3Oo0BAAA8q9ZzPq6XmTkf/fv3r/HJmatWrXJaf/bZZ/Xss8/Wen8AAKDu1XrOBwAAQG2YnvMBAABwI+r0UlvDMDR37txaFwcAALyP119qCwAA6pd6faktAADwPo1cOZjdbq/x6hQAAACXhI/ly5crKipK/v7+8vf3V1RUlJYtW+aKoQEAgJcxfZOx6dOna968eZo0aZKsVqskKSMjQ1OnTlVeXp5mzpxpukgAAOA9TIePlJQULV26VMOGDXO0Pfroo4qOjtakSZMIHwAAwInp0y4VFRWKjY29qj0mJkaXLl0yOzwAAPAypsPHyJEjlZKSclX7kiVLNHz4cLPDAwAAL2P62S6GYWjZsmXasmWL7r33XklSZmam8vLylJCQ4JoqAQCA13DJs11iYmIkSd9++60kqWXLlmrZsqUOHjxosjwAAOBteLYLAABwK5feZAwAAOBaTF9qe9mhQ4eUl5en8vJyp/ZHH33UVbsAAABewHT4+O677/TrX/9aubm5MgzDcXv1yw+Vs9lsZncBAAC8iOnTLpMnT1ZERIROnjypgIAAHTx4UDt27FBsbKy2b9/ughIBAIA3MX3kIyMjQ59//rlatmypRo0aqVGjRrrvvvuUnJysp59++qorYwAAwM3N9JEPm82mwMBAST9dYnvixAlJUrt27XT48GGzwwOoxy6U23iSNYAbZvrIR1RUlP76178qIiJCvXr10quvvio/Pz8tWbJEd9xxhytqBFBPxc7eqth2LbR+nNUxzwsArsX0kY8XXnhBlZWVkqQZM2bo6NGjuv/++/Xpp59q4cKFpgsEUL808fVRbLsWjvWsY2d0sYKJ5QCun+kjH3FxcY5/d+zYUV999ZXOnDmjFi1a8JcQ4IUMw9D6cVb9s7RcsbO3erocAA2QS24ytnz5ckVFRcnf31/+/v7q27evli9f7oqhAdRDhmEowM/H02UAaKBMh4/p06dr8uTJGjx4sNavX6/169dr8ODBmjp1qqZPn25q7B07dmjw4MFq3bq1DMPQxo0br7nN9u3b1bNnT1ksFnXs2FGrVq0yVQMAAHAt06ddUlJStHTpUg0bNszR9uijjyo6OlqTJk3SzJkzaz12aWmpunXrpieffFKPP/74NfsfPXpUjzzyiMaNG6d33nlH6enpGjt2rMLCwpxODwEAAM8xHT4qKioUGxt7VXtMTIwuXbpkauxBgwZp0KBB190/NTVVERERmjt3riTpzjvv1M6dOzV//nzCBwAA9YTp0y4jR45USkrKVe1LlizR8OHDzQ5/QzIyMjRw4ECntri4OGVkZFS7TVlZmUpKSpwWAABQd2p15CMxMdHxb8MwtGzZMm3ZskX33nuvJCkzM1N5eXlKSEhwTZXXqbCwUCEhIU5tISEhKikp0cWLF9WkSZOrtklOTtaMGTPcVSIAADe9WoWPK2+ZHhMTI0n69ttvJf10p9OWLVvq4MGDJsure0lJSU5hqqSkROHh4R6sCAAA71ar8LFt2zZX1+ESoaGhKioqcmorKipSUFBQlUc9JMlischisbijPAAAIBfd56O+sFqtSk9Pd2pLS0uT1Wr1UEUAAOBKpq92kaSzZ89q+fLl+uqrryRJkZGRGjNmjIKDg02Ne/78eR05csSxfvToUe3fv1+33HKL2rZtq6SkJB0/flxvvvmmJGncuHFatGiRnn32WT355JP6/PPP9d577+mTTz4xVQcAAHAd00c+srKy1KFDB82fP1+nT5/W6dOnNX/+fHXo0EHZ2dmmx+7Ro4d69Ogh6aeJrj169HDcvKygoEB5eXmO/hEREfrkk0+Ulpambt26ae7cuVq2bBmX2QIAUI+YPvIxdepUPfroo1q6dKkaN/5puEuXLmns2LGaMmWKduzYUeux+/fvX+Pjuqu6e2n//v2vmhALAADqD9PhIysryyl4SFLjxo317LPPVnnzMQAAcHMzfdolKCjI6dTHZfn5+QoMDDQ7PAAA8DKmw8fQoUM1ZswYrVu3Tvn5+crPz9fatWs1duxYp+e9AAAASC447fLnP/9ZhmEoISHB8SwXX19fjR8/Xq+88orpAgEAgHcxHT78/Py0YMECJScnO+5w2qFDBwUEBJguDgAAeB9Tp10qKio0YMAA/f3vf1dAQIC6du2qrl27EjwAAEC1TIUPX19f/e1vf3NVLQAA4CZgesLpiBEjtHz5clfUAgAAbgKm53xcunRJK1as0NatWxUTE6OmTZs6vT5v3jyzuwAAAF7EdPg4cOCAevbsKUn65ptvnF4zDMPs8AAAwMuYDh/btm1z/PvyrdAJHQAAoDqm53xI0vLlyxUVFSV/f3/5+/srKipKy5Ytc8XQAADAy5g+8jF9+nTNmzdPkyZNktVqlSRlZGRo6tSpysvL08yZM00XCaB+u1BuUxNfH456ArgupsNHSkqKli5d6nQr9UcffVTR0dGaNGkS4QO4CcTO3qrYdi20fpyVAALgmkyfdqmoqKjy6bUxMTGO260D8D5NfH0U266FYz3r2BldrLB5sCIADYXp8DFy5EilpKRc1b5kyRINHz7c7PAA6inDMLR+nFVZLwz0dCkAGhjTp12knyacbtmyRffee68kKTMzU3l5eUpISFBiYqKjH/f8ALyLYRgK8PPxdBkAGhiX3ufj8oPlWrZsqZYtW+rAgQOOfpwHBgAAkovv8wEAAHAtLrnPBwAAwPUifAAAALcifAAAALcifAAAALcifAAAALeq9+HjjTfeUPv27eXv769evXppz5491fZdtWqVDMNwWvz9/d1YLQAAuJZ6HT7WrVunxMREvfTSS8rOzla3bt0UFxenkydPVrtNUFCQCgoKHMuxY8fcWDEAALiWeh0+5s2bp6eeekqjR49WZGSkUlNTFRAQoBUrVlS7jWEYCg0NdSwhISFurBgAAFxLvQ0f5eXl2rdvnwYO/NdzIxo1aqSBAwcqIyOj2u3Onz+vdu3aKTw8XI899pgOHjxY437KyspUUlLitAAAgLpTb8PHDz/8IJvNdtWRi5CQEBUWFla5TefOnbVixQp99NFHevvtt1VZWanevXvr+++/r3Y/ycnJCg4Odizh4eEufR8AAMBZvQ0ftWG1WpWQkKDu3burX79++vDDD3Xbbbdp8eLF1W6TlJSk4uJix5Kfn+/GigEAuPm45Km2daFly5by8fFRUVGRU3tRUZFCQ0OvawxfX1/16NFDR44cqbaPxWKRxWIxVSsAALh+9fbIh5+fn2JiYpSenu5oq6ysVHp6uqxW63WNYbPZlJubq7CwsLoqE8DPXCi3yW63e7oMAPVcvQ0fkpSYmKilS5dq9erV+uqrrzR+/HiVlpZq9OjRkqSEhAQlJSU5+s+cOVNbtmzRd999p+zsbI0YMULHjh3T2LFjPfUWgJtK7OytGpKaQQABUKN6e9pFkoYOHapTp05p+vTpKiwsVPfu3bVp0ybHJNS8vDw1avSv/HTmzBk99dRTKiwsVIsWLRQTE6Ndu3YpMjLSU28B8HpNfH0U266Fso6dkSRlHTujixU2BfjV618vADzIsPMnipOSkhIFBweruLhYQUFBni4HqFMXyi8pcvpmSdKhmXG1Dgx2u13/LC1X7OytpscC0HBd73dovT7tAqBhMAxDAX4+ni4DQANB+AAAAG5F+AAAAG5F+AAAAG5F+AAAAG5F+AAAAG5F+AAAAG5F+AAAAG5F+AAAAG5F+ADgcjxgDkBNCB8AXI4HzAGoCeEDgEtcfsDcZZcfMAcAVyJ8AHAJwzC0fpxVWS8M9HQpAOo5wgcAl+EBcwCuB+EDAAC4FeEDAAC4FeEDAAC4FeEDQJ3hfh8AqkL4AFBnuN8HgKoQPgC4FPf7AHAthA8ALsX9PgBcC+EDgMtxvw8ANSF8AKhzTDwF8HOEDwB1jomnAH6O8AGgTjDxFEB16n34eOONN9S+fXv5+/urV69e2rNnT439169fry5dusjf319du3bVp59+6qZKAfxcVRNPOf0CQKrn4WPdunVKTEzUSy+9pOzsbHXr1k1xcXE6efJklf137dqlYcOGacyYMcrJyVF8fLzi4+N14MABN1cOQLp64mns7K16ZOFOlZZd0oXyfy0EEuDmYtjr8U99r169dPfdd2vRokWSpMrKSoWHh2vSpEl67rnnruo/dOhQlZaW6uOPP3a03XvvverevbtSU1Ova58lJSUKDg5WcXGxgoKCTL8Hu93OoWbUWxfKbYqdvVWSdGhmnAL8Grt8H3a7XUNSM5R17Ey1fSLDgrR+nFWG4fLdA7iGJr4+Mlz0w3e936Gu/03jIuXl5dq3b5+SkpIcbY0aNdLAgQOVkZFR5TYZGRlKTEx0aouLi9PGjRur3U9ZWZnKysoc6yUlJeYKv8LFCpsip2926ZhAQ3L59MuFcpuGpGboUMHVP2OHCkp010v8nACeUFd/eNSk3oaPH374QTabTSEhIU7tISEh+vrrr6vcprCwsMr+hYWF1e4nOTlZM2bMMF8w0IDFtmuhJr51d18OwzDU1NJYnzx9n9ORQLtd1QYSAN6r3oYPd0lKSnI6WlJSUqLw8HCXjd/E10eHZsa5bDygLrjysGtNfpoD4vxr58pAAsC96vIPj+rU2/DRsmVL+fj4qKioyKm9qKhIoaGhVW4TGhp6Q/0lyWKxyGKxmC+4GlX9sgXwL/yMADefenu1i5+fn2JiYpSenu5oq6ysVHp6uqxWa5XbWK1Wp/6SlJaWVm1/AADgfvX6z43ExESNGjVKsbGxuueee/T666+rtLRUo0ePliQlJCTo9ttvV3JysiRp8uTJ6tevn+bOnatHHnlEa9euVVZWlpYsWeLJtwEAAH6mXoePoUOH6tSpU5o+fboKCwvVvXt3bdq0yTGpNC8vT40a/evgTe/evbVmzRq98MIL+sMf/qBOnTpp48aNioqK8tRbAAAAV6jX9/nwBFff5wMAgJvF9X6H1ts5HwAAwDsRPgAAgFsRPgAAgFsRPgAAgFsRPgAAgFsRPgAAgFvV6/t8eMLlK49d/XRbAAC83eXvzmvdxYPwcYVz585JkksfLgcAwM3k3LlzCg4OrvZ1bjJ2hcrKSp04cUKBgYEue8rn5Sfl5ufnc+MyF+EzdS0+T9fjM3UtPk/Xq4vP1G6369y5c2rdurXTHcivxJGPKzRq1Eht2rSpk7GDgoL4oXExPlPX4vN0PT5T1+LzdD1Xf6Y1HfG4jAmnAADArQgfAADArQgfbmCxWPTSSy/JYrF4uhSvwWfqWnyersdn6lp8nq7nyc+UCacAAMCtOPIBAADcivABAADcivABAADcivABAADcivDhBm+88Ybat28vf39/9erVS3v27PF0SQ1ScnKy7r77bgUGBqpVq1aKj4/X4cOHPV2W13jllVdkGIamTJni6VIatOPHj2vEiBG69dZb1aRJE3Xt2lVZWVmeLqvBstlsevHFFxUREaEmTZqoQ4cOmjVr1jWfHYKf7NixQ4MHD1br1q1lGIY2btzo9Lrdbtf06dMVFhamJk2aaODAgfr73/9e53URPurYunXrlJiYqJdeeknZ2dnq1q2b4uLidPLkSU+X1uB88cUXmjBhgnbv3q20tDRVVFTowQcfVGlpqadLa/D27t2rxYsXKzo62tOlNGhnzpxRnz595Ovrq88++0yHDh3S3Llz1aJFC0+X1mD96U9/UkpKihYtWqSvvvpKf/rTn/Tqq6/qL3/5i6dLaxBKS0vVrVs3vfHGG1W+/uqrr2rhwoVKTU1VZmammjZtqri4OP344491W5gddeqee+6xT5gwwbFus9nsrVu3ticnJ3uwKu9w8uRJuyT7F1984elSGrRz587ZO3XqZE9LS7P369fPPnnyZE+X1GD9/ve/t993332eLsOrPPLII/Ynn3zSqe3xxx+3Dx8+3EMVNVyS7Bs2bHCsV1ZW2kNDQ+2vvfaao+3s2bN2i8Vif/fdd+u0Fo581KHy8nLt27dPAwcOdLQ1atRIAwcOVEZGhgcr8w7FxcWSpFtuucXDlTRsEyZM0COPPOL0/ylq57//+78VGxurIUOGqFWrVurRo4eWLl3q6bIatN69eys9PV3ffPONJOmvf/2rdu7cqUGDBnm4sobv6NGjKiwsdPrZDw4OVq9ever8O4oHy9WhH374QTabTSEhIU7tISEh+vrrrz1UlXeorKzUlClT1KdPH0VFRXm6nAZr7dq1ys7O1t69ez1dilf47rvvlJKSosTERP3hD3/Q3r179fTTT8vPz0+jRo3ydHkN0nPPPaeSkhJ16dJFPj4+stlsevnllzV8+HBPl9bgFRYWSlKV31GXX6srhA80SBMmTNCBAwe0c+dOT5fSYOXn52vy5MlKS0uTv7+/p8vxCpWVlYqNjdWcOXMkST169NCBAweUmppK+Kil9957T++8847WrFmju+66S/v379eUKVPUunVrPtMGjNMudahly5by8fFRUVGRU3tRUZFCQ0M9VFXDN3HiRH388cfatm2b2rRp4+lyGqx9+/bp5MmT6tmzpxo3bqzGjRvriy++0MKFC9W4cWPZbDZPl9jghIWFKTIy0qntzjvvVF5enocqavieeeYZPffcc/r3f/93de3aVSNHjtTUqVOVnJzs6dIavMvfQ574jiJ81CE/Pz/FxMQoPT3d0VZZWan09HRZrVYPVtYw2e12TZw4URs2bNDnn3+uiIgIT5fUoA0YMEC5ubnav3+/Y4mNjdXw4cO1f/9++fj4eLrEBqdPnz5XXf79zTffqF27dh6qqOG7cOGCGjVy/qry8fFRZWWlhyryHhEREQoNDXX6jiopKVFmZmadf0dx2qWOJSYmatSoUYqNjdU999yj119/XaWlpRo9erSnS2twJkyYoDVr1uijjz5SYGCg45xkcHCwmjRp4uHqGp7AwMCr5ss0bdpUt956K/Noamnq1Knq3bu35syZo9/+9rfas2ePlixZoiVLlni6tAZr8ODBevnll9W2bVvdddddysnJ0bx58/Tkk096urQG4fz58zpy5Ihj/ejRo9q/f79uueUWtW3bVlOmTNHs2bPVqVMnRURE6MUXX1Tr1q0VHx9ft4XV6bU0sNvtdvtf/vIXe9u2be1+fn72e+65x757925Pl9QgSapyWblypadL8xpcamve//zP/9ijoqLsFovF3qVLF/uSJUs8XVKDVlJSYp88ebK9bdu2dn9/f/sdd9xhf/755+1lZWWeLq1B2LZtW5W/N0eNGmW323+63PbFF1+0h4SE2C0Wi33AgAH2w4cP13ldht3ObeIAAID7MOcDAAC4FeEDAAC4FeEDAAC4FeEDAAC4FeEDAAC4FeEDAAC4FeEDAAC4FeEDQL2wfft2GYahs2fPeroUAHWMm4wB8Ij+/fure/fuev311yVJ5eXlOn36tEJCQmQYhmeLA1CneLYLgHrBz8+Ppz0DNwlOuwBwu//8z//UF198oQULFsgwDBmGoVWrVjmddlm1apWaN2+ujz/+WJ07d1ZAQICeeOIJXbhwQatXr1b79u3VokULPf3007LZbI6xy8rKNG3aNN1+++1q2rSpevXqpe3bt3vmjQKoEkc+ALjdggUL9M033ygqKkozZ86UJB08ePCqfhcuXNDChQu1du1anTt3To8//rh+/etfq3nz5vr000/13Xff6Te/+Y369OmjoUOHSpImTpyoQ4cOae3atWrdurU2bNighx56SLm5uerUqZNb3yeAqhE+ALhdcHCw/Pz8FBAQ4DjV8vXXX1/Vr6KiQikpKerQoYMk6YknntBbb72loqIiNWvWTJGRkXrggQe0bds2DR06VHl5eVq5cqXy8vLUunVrSdK0adO0adMmrVy5UnPmzHHfmwRQLcIHgHorICDAETwkKSQkRO3bt1ezZs2c2k6ePClJys3Nlc1m0y9+8QunccrKynTrrbe6p2gA10T4AFBv+fr6Oq0bhlFlW2VlpSTp/Pnz8vHx0b59++Tj4+PU7+eBBYBnET4AeISfn5/TRFFX6NGjh2w2m06ePKn777/fpWMDcB2udgHgEe3bt1dmZqb+8Y9/6IcffnAcvTDjF7/4hYYPH66EhAR9+OGHOnr0qPbs2aPk5GR98sknLqgagCsQPgB4xLRp0+Tj46PIyEjddtttysvLc8m4K1euVEJCgn73u9+pc+fOio+P1969e9W2bVuXjA/APO5wCgAA3IojHwAAwK0IHwAAwK0IHwAAwK0IHwAAwK0IHwAAwK0IHwAAwK0IHwAAwK0IHwAAwK0IHwAAwK0IHwAAwK0IHwAAwK0IHwAAwK3+P2YGL4nRCMXCAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(6, 4))\n",
    "ax = fig.add_subplot()\n",
    "ax.plot(t, pd, drawstyle='steps')\n",
    "ax.set_xlabel('time')\n",
    "ax.set_ylabel(r'probability density / time$^{-1}$')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
